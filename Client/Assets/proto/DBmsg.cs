// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class DBmsg {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_DBBagGrid__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::DBBagGrid, global::DBBagGrid.Builder> internal__static_DBBagGrid__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_DBBagGridList__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::DBBagGridList, global::DBBagGridList.Builder> internal__static_DBBagGridList__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_DBBagInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::DBBagInfo, global::DBBagInfo.Builder> internal__static_DBBagInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_DBRoleInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::DBRoleInfo, global::DBRoleInfo.Builder> internal__static_DBRoleInfo__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static DBmsg() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgtEQm1zZy5wcm90byIkCglEQkJhZ0dyaWQSCgoCSUQYASABKA0SCwoDTnVt", 
          "GAIgASgNIioKDURCQmFnR3JpZExpc3QSGQoFR3JpZHMYASADKAsyCi5EQkJh", 
          "Z0dyaWQiLQoJREJCYWdJbmZvEiAKCEdyaWRMaXN0GAEgASgLMg4uREJCYWdH", 
          "cmlkTGlzdCKIAQoKREJSb2xlSW5mbxILCgNVSUQYASABKAQSDAoETmFtZRgC", 
          "IAEoCRINCgVMZXZlbBgDIAEoDRIMCgRSYW5rGAQgASgNEhIKCkxldmVsRXhw", 
          "ZXIYBSABKA0SEQoJUmFua0V4cGVyGAYgASgNEhsKB0JhZ0luZm8YByABKAsy", 
        "Ci5EQkJhZ0luZm8="));
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_DBBagGrid__Descriptor = Descriptor.MessageTypes[0];
      internal__static_DBBagGrid__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::DBBagGrid, global::DBBagGrid.Builder>(internal__static_DBBagGrid__Descriptor,
              new string[] { "ID", "Num", });
      internal__static_DBBagGridList__Descriptor = Descriptor.MessageTypes[1];
      internal__static_DBBagGridList__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::DBBagGridList, global::DBBagGridList.Builder>(internal__static_DBBagGridList__Descriptor,
              new string[] { "Grids", });
      internal__static_DBBagInfo__Descriptor = Descriptor.MessageTypes[2];
      internal__static_DBBagInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::DBBagInfo, global::DBBagInfo.Builder>(internal__static_DBBagInfo__Descriptor,
              new string[] { "GridList", });
      internal__static_DBRoleInfo__Descriptor = Descriptor.MessageTypes[3];
      internal__static_DBRoleInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::DBRoleInfo, global::DBRoleInfo.Builder>(internal__static_DBRoleInfo__Descriptor,
              new string[] { "UID", "Name", "Level", "Rank", "LevelExper", "RankExper", "BagInfo", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        }, assigner);
  }
  #endregion
  
}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DBBagGrid : pb::GeneratedMessage<DBBagGrid, DBBagGrid.Builder> {
  private DBBagGrid() { }
  private static readonly DBBagGrid defaultInstance = new DBBagGrid().MakeReadOnly();
  private static readonly string[] _dBBagGridFieldNames = new string[] { "ID", "Num" };
  private static readonly uint[] _dBBagGridFieldTags = new uint[] { 8, 16 };
  public static DBBagGrid DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override DBBagGrid DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override DBBagGrid ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DBmsg.internal__static_DBBagGrid__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<DBBagGrid, DBBagGrid.Builder> InternalFieldAccessors {
    get { return global::DBmsg.internal__static_DBBagGrid__FieldAccessorTable; }
  }
  
  public const int IDFieldNumber = 1;
  private bool hasID;
  private uint iD_;
  public bool HasID {
    get { return hasID; }
  }
  [global::System.CLSCompliant(false)]
  public uint ID {
    get { return iD_; }
  }
  
  public const int NumFieldNumber = 2;
  private bool hasNum;
  private uint num_;
  public bool HasNum {
    get { return hasNum; }
  }
  [global::System.CLSCompliant(false)]
  public uint Num {
    get { return num_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _dBBagGridFieldNames;
    if (hasID) {
      output.WriteUInt32(1, field_names[0], ID);
    }
    if (hasNum) {
      output.WriteUInt32(2, field_names[1], Num);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasID) {
      size += pb::CodedOutputStream.ComputeUInt32Size(1, ID);
    }
    if (hasNum) {
      size += pb::CodedOutputStream.ComputeUInt32Size(2, Num);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static DBBagGrid ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static DBBagGrid ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static DBBagGrid ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static DBBagGrid ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static DBBagGrid ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static DBBagGrid ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static DBBagGrid ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static DBBagGrid ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static DBBagGrid ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static DBBagGrid ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private DBBagGrid MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(DBBagGrid prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<DBBagGrid, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(DBBagGrid cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private DBBagGrid result;
    
    private DBBagGrid PrepareBuilder() {
      if (resultIsReadOnly) {
        DBBagGrid original = result;
        result = new DBBagGrid();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override DBBagGrid MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::DBBagGrid.Descriptor; }
    }
    
    public override DBBagGrid DefaultInstanceForType {
      get { return global::DBBagGrid.DefaultInstance; }
    }
    
    public override DBBagGrid BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is DBBagGrid) {
        return MergeFrom((DBBagGrid) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(DBBagGrid other) {
      if (other == global::DBBagGrid.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasID) {
        ID = other.ID;
      }
      if (other.HasNum) {
        Num = other.Num;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_dBBagGridFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _dBBagGridFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasID = input.ReadUInt32(ref result.iD_);
            break;
          }
          case 16: {
            result.hasNum = input.ReadUInt32(ref result.num_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasID {
      get { return result.hasID; }
    }
    [global::System.CLSCompliant(false)]
    public uint ID {
      get { return result.ID; }
      set { SetID(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetID(uint value) {
      PrepareBuilder();
      result.hasID = true;
      result.iD_ = value;
      return this;
    }
    public Builder ClearID() {
      PrepareBuilder();
      result.hasID = false;
      result.iD_ = 0;
      return this;
    }
    
    public bool HasNum {
      get { return result.hasNum; }
    }
    [global::System.CLSCompliant(false)]
    public uint Num {
      get { return result.Num; }
      set { SetNum(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetNum(uint value) {
      PrepareBuilder();
      result.hasNum = true;
      result.num_ = value;
      return this;
    }
    public Builder ClearNum() {
      PrepareBuilder();
      result.hasNum = false;
      result.num_ = 0;
      return this;
    }
  }
  static DBBagGrid() {
    object.ReferenceEquals(global::DBmsg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DBBagGridList : pb::GeneratedMessage<DBBagGridList, DBBagGridList.Builder> {
  private DBBagGridList() { }
  private static readonly DBBagGridList defaultInstance = new DBBagGridList().MakeReadOnly();
  private static readonly string[] _dBBagGridListFieldNames = new string[] { "Grids" };
  private static readonly uint[] _dBBagGridListFieldTags = new uint[] { 10 };
  public static DBBagGridList DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override DBBagGridList DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override DBBagGridList ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DBmsg.internal__static_DBBagGridList__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<DBBagGridList, DBBagGridList.Builder> InternalFieldAccessors {
    get { return global::DBmsg.internal__static_DBBagGridList__FieldAccessorTable; }
  }
  
  public const int GridsFieldNumber = 1;
  private pbc::PopsicleList<global::DBBagGrid> grids_ = new pbc::PopsicleList<global::DBBagGrid>();
  public scg::IList<global::DBBagGrid> GridsList {
    get { return grids_; }
  }
  public int GridsCount {
    get { return grids_.Count; }
  }
  public global::DBBagGrid GetGrids(int index) {
    return grids_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _dBBagGridListFieldNames;
    if (grids_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], grids_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::DBBagGrid element in GridsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static DBBagGridList ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static DBBagGridList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static DBBagGridList ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static DBBagGridList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static DBBagGridList ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static DBBagGridList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static DBBagGridList ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static DBBagGridList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static DBBagGridList ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static DBBagGridList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private DBBagGridList MakeReadOnly() {
    grids_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(DBBagGridList prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<DBBagGridList, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(DBBagGridList cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private DBBagGridList result;
    
    private DBBagGridList PrepareBuilder() {
      if (resultIsReadOnly) {
        DBBagGridList original = result;
        result = new DBBagGridList();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override DBBagGridList MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::DBBagGridList.Descriptor; }
    }
    
    public override DBBagGridList DefaultInstanceForType {
      get { return global::DBBagGridList.DefaultInstance; }
    }
    
    public override DBBagGridList BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is DBBagGridList) {
        return MergeFrom((DBBagGridList) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(DBBagGridList other) {
      if (other == global::DBBagGridList.DefaultInstance) return this;
      PrepareBuilder();
      if (other.grids_.Count != 0) {
        result.grids_.Add(other.grids_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_dBBagGridListFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _dBBagGridListFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.grids_, global::DBBagGrid.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::DBBagGrid> GridsList {
      get { return PrepareBuilder().grids_; }
    }
    public int GridsCount {
      get { return result.GridsCount; }
    }
    public global::DBBagGrid GetGrids(int index) {
      return result.GetGrids(index);
    }
    public Builder SetGrids(int index, global::DBBagGrid value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.grids_[index] = value;
      return this;
    }
    public Builder SetGrids(int index, global::DBBagGrid.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.grids_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddGrids(global::DBBagGrid value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.grids_.Add(value);
      return this;
    }
    public Builder AddGrids(global::DBBagGrid.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.grids_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeGrids(scg::IEnumerable<global::DBBagGrid> values) {
      PrepareBuilder();
      result.grids_.Add(values);
      return this;
    }
    public Builder ClearGrids() {
      PrepareBuilder();
      result.grids_.Clear();
      return this;
    }
  }
  static DBBagGridList() {
    object.ReferenceEquals(global::DBmsg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DBBagInfo : pb::GeneratedMessage<DBBagInfo, DBBagInfo.Builder> {
  private DBBagInfo() { }
  private static readonly DBBagInfo defaultInstance = new DBBagInfo().MakeReadOnly();
  private static readonly string[] _dBBagInfoFieldNames = new string[] { "GridList" };
  private static readonly uint[] _dBBagInfoFieldTags = new uint[] { 10 };
  public static DBBagInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override DBBagInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override DBBagInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DBmsg.internal__static_DBBagInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<DBBagInfo, DBBagInfo.Builder> InternalFieldAccessors {
    get { return global::DBmsg.internal__static_DBBagInfo__FieldAccessorTable; }
  }
  
  public const int GridListFieldNumber = 1;
  private bool hasGridList;
  private global::DBBagGridList gridList_;
  public bool HasGridList {
    get { return hasGridList; }
  }
  public global::DBBagGridList GridList {
    get { return gridList_ ?? global::DBBagGridList.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _dBBagInfoFieldNames;
    if (hasGridList) {
      output.WriteMessage(1, field_names[0], GridList);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasGridList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, GridList);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static DBBagInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static DBBagInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static DBBagInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static DBBagInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static DBBagInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static DBBagInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static DBBagInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static DBBagInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static DBBagInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static DBBagInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private DBBagInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(DBBagInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<DBBagInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(DBBagInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private DBBagInfo result;
    
    private DBBagInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        DBBagInfo original = result;
        result = new DBBagInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override DBBagInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::DBBagInfo.Descriptor; }
    }
    
    public override DBBagInfo DefaultInstanceForType {
      get { return global::DBBagInfo.DefaultInstance; }
    }
    
    public override DBBagInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is DBBagInfo) {
        return MergeFrom((DBBagInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(DBBagInfo other) {
      if (other == global::DBBagInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasGridList) {
        MergeGridList(other.GridList);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_dBBagInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _dBBagInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::DBBagGridList.Builder subBuilder = global::DBBagGridList.CreateBuilder();
            if (result.hasGridList) {
              subBuilder.MergeFrom(GridList);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            GridList = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasGridList {
     get { return result.hasGridList; }
    }
    public global::DBBagGridList GridList {
      get { return result.GridList; }
      set { SetGridList(value); }
    }
    public Builder SetGridList(global::DBBagGridList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGridList = true;
      result.gridList_ = value;
      return this;
    }
    public Builder SetGridList(global::DBBagGridList.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasGridList = true;
      result.gridList_ = builderForValue.Build();
      return this;
    }
    public Builder MergeGridList(global::DBBagGridList value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasGridList &&
          result.gridList_ != global::DBBagGridList.DefaultInstance) {
          result.gridList_ = global::DBBagGridList.CreateBuilder(result.gridList_).MergeFrom(value).BuildPartial();
      } else {
        result.gridList_ = value;
      }
      result.hasGridList = true;
      return this;
    }
    public Builder ClearGridList() {
      PrepareBuilder();
      result.hasGridList = false;
      result.gridList_ = null;
      return this;
    }
  }
  static DBBagInfo() {
    object.ReferenceEquals(global::DBmsg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DBRoleInfo : pb::GeneratedMessage<DBRoleInfo, DBRoleInfo.Builder> {
  private DBRoleInfo() { }
  private static readonly DBRoleInfo defaultInstance = new DBRoleInfo().MakeReadOnly();
  private static readonly string[] _dBRoleInfoFieldNames = new string[] { "BagInfo", "Level", "LevelExper", "Name", "Rank", "RankExper", "UID" };
  private static readonly uint[] _dBRoleInfoFieldTags = new uint[] { 58, 24, 40, 18, 32, 48, 8 };
  public static DBRoleInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override DBRoleInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override DBRoleInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::DBmsg.internal__static_DBRoleInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<DBRoleInfo, DBRoleInfo.Builder> InternalFieldAccessors {
    get { return global::DBmsg.internal__static_DBRoleInfo__FieldAccessorTable; }
  }
  
  public const int UIDFieldNumber = 1;
  private bool hasUID;
  private ulong uID_;
  public bool HasUID {
    get { return hasUID; }
  }
  [global::System.CLSCompliant(false)]
  public ulong UID {
    get { return uID_; }
  }
  
  public const int NameFieldNumber = 2;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int LevelFieldNumber = 3;
  private bool hasLevel;
  private uint level_;
  public bool HasLevel {
    get { return hasLevel; }
  }
  [global::System.CLSCompliant(false)]
  public uint Level {
    get { return level_; }
  }
  
  public const int RankFieldNumber = 4;
  private bool hasRank;
  private uint rank_;
  public bool HasRank {
    get { return hasRank; }
  }
  [global::System.CLSCompliant(false)]
  public uint Rank {
    get { return rank_; }
  }
  
  public const int LevelExperFieldNumber = 5;
  private bool hasLevelExper;
  private uint levelExper_;
  public bool HasLevelExper {
    get { return hasLevelExper; }
  }
  [global::System.CLSCompliant(false)]
  public uint LevelExper {
    get { return levelExper_; }
  }
  
  public const int RankExperFieldNumber = 6;
  private bool hasRankExper;
  private uint rankExper_;
  public bool HasRankExper {
    get { return hasRankExper; }
  }
  [global::System.CLSCompliant(false)]
  public uint RankExper {
    get { return rankExper_; }
  }
  
  public const int BagInfoFieldNumber = 7;
  private bool hasBagInfo;
  private global::DBBagInfo bagInfo_;
  public bool HasBagInfo {
    get { return hasBagInfo; }
  }
  public global::DBBagInfo BagInfo {
    get { return bagInfo_ ?? global::DBBagInfo.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _dBRoleInfoFieldNames;
    if (hasUID) {
      output.WriteUInt64(1, field_names[6], UID);
    }
    if (hasName) {
      output.WriteString(2, field_names[3], Name);
    }
    if (hasLevel) {
      output.WriteUInt32(3, field_names[1], Level);
    }
    if (hasRank) {
      output.WriteUInt32(4, field_names[4], Rank);
    }
    if (hasLevelExper) {
      output.WriteUInt32(5, field_names[2], LevelExper);
    }
    if (hasRankExper) {
      output.WriteUInt32(6, field_names[5], RankExper);
    }
    if (hasBagInfo) {
      output.WriteMessage(7, field_names[0], BagInfo);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasUID) {
      size += pb::CodedOutputStream.ComputeUInt64Size(1, UID);
    }
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Name);
    }
    if (hasLevel) {
      size += pb::CodedOutputStream.ComputeUInt32Size(3, Level);
    }
    if (hasRank) {
      size += pb::CodedOutputStream.ComputeUInt32Size(4, Rank);
    }
    if (hasLevelExper) {
      size += pb::CodedOutputStream.ComputeUInt32Size(5, LevelExper);
    }
    if (hasRankExper) {
      size += pb::CodedOutputStream.ComputeUInt32Size(6, RankExper);
    }
    if (hasBagInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(7, BagInfo);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static DBRoleInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static DBRoleInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static DBRoleInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static DBRoleInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static DBRoleInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static DBRoleInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static DBRoleInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static DBRoleInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static DBRoleInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static DBRoleInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private DBRoleInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(DBRoleInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<DBRoleInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(DBRoleInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private DBRoleInfo result;
    
    private DBRoleInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        DBRoleInfo original = result;
        result = new DBRoleInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override DBRoleInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::DBRoleInfo.Descriptor; }
    }
    
    public override DBRoleInfo DefaultInstanceForType {
      get { return global::DBRoleInfo.DefaultInstance; }
    }
    
    public override DBRoleInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is DBRoleInfo) {
        return MergeFrom((DBRoleInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(DBRoleInfo other) {
      if (other == global::DBRoleInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasUID) {
        UID = other.UID;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      if (other.HasRank) {
        Rank = other.Rank;
      }
      if (other.HasLevelExper) {
        LevelExper = other.LevelExper;
      }
      if (other.HasRankExper) {
        RankExper = other.RankExper;
      }
      if (other.HasBagInfo) {
        MergeBagInfo(other.BagInfo);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_dBRoleInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _dBRoleInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasUID = input.ReadUInt64(ref result.uID_);
            break;
          }
          case 18: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 24: {
            result.hasLevel = input.ReadUInt32(ref result.level_);
            break;
          }
          case 32: {
            result.hasRank = input.ReadUInt32(ref result.rank_);
            break;
          }
          case 40: {
            result.hasLevelExper = input.ReadUInt32(ref result.levelExper_);
            break;
          }
          case 48: {
            result.hasRankExper = input.ReadUInt32(ref result.rankExper_);
            break;
          }
          case 58: {
            global::DBBagInfo.Builder subBuilder = global::DBBagInfo.CreateBuilder();
            if (result.hasBagInfo) {
              subBuilder.MergeFrom(BagInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            BagInfo = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasUID {
      get { return result.hasUID; }
    }
    [global::System.CLSCompliant(false)]
    public ulong UID {
      get { return result.UID; }
      set { SetUID(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetUID(ulong value) {
      PrepareBuilder();
      result.hasUID = true;
      result.uID_ = value;
      return this;
    }
    public Builder ClearUID() {
      PrepareBuilder();
      result.hasUID = false;
      result.uID_ = 0UL;
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasLevel {
      get { return result.hasLevel; }
    }
    [global::System.CLSCompliant(false)]
    public uint Level {
      get { return result.Level; }
      set { SetLevel(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetLevel(uint value) {
      PrepareBuilder();
      result.hasLevel = true;
      result.level_ = value;
      return this;
    }
    public Builder ClearLevel() {
      PrepareBuilder();
      result.hasLevel = false;
      result.level_ = 0;
      return this;
    }
    
    public bool HasRank {
      get { return result.hasRank; }
    }
    [global::System.CLSCompliant(false)]
    public uint Rank {
      get { return result.Rank; }
      set { SetRank(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRank(uint value) {
      PrepareBuilder();
      result.hasRank = true;
      result.rank_ = value;
      return this;
    }
    public Builder ClearRank() {
      PrepareBuilder();
      result.hasRank = false;
      result.rank_ = 0;
      return this;
    }
    
    public bool HasLevelExper {
      get { return result.hasLevelExper; }
    }
    [global::System.CLSCompliant(false)]
    public uint LevelExper {
      get { return result.LevelExper; }
      set { SetLevelExper(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetLevelExper(uint value) {
      PrepareBuilder();
      result.hasLevelExper = true;
      result.levelExper_ = value;
      return this;
    }
    public Builder ClearLevelExper() {
      PrepareBuilder();
      result.hasLevelExper = false;
      result.levelExper_ = 0;
      return this;
    }
    
    public bool HasRankExper {
      get { return result.hasRankExper; }
    }
    [global::System.CLSCompliant(false)]
    public uint RankExper {
      get { return result.RankExper; }
      set { SetRankExper(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRankExper(uint value) {
      PrepareBuilder();
      result.hasRankExper = true;
      result.rankExper_ = value;
      return this;
    }
    public Builder ClearRankExper() {
      PrepareBuilder();
      result.hasRankExper = false;
      result.rankExper_ = 0;
      return this;
    }
    
    public bool HasBagInfo {
     get { return result.hasBagInfo; }
    }
    public global::DBBagInfo BagInfo {
      get { return result.BagInfo; }
      set { SetBagInfo(value); }
    }
    public Builder SetBagInfo(global::DBBagInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasBagInfo = true;
      result.bagInfo_ = value;
      return this;
    }
    public Builder SetBagInfo(global::DBBagInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasBagInfo = true;
      result.bagInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeBagInfo(global::DBBagInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasBagInfo &&
          result.bagInfo_ != global::DBBagInfo.DefaultInstance) {
          result.bagInfo_ = global::DBBagInfo.CreateBuilder(result.bagInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.bagInfo_ = value;
      }
      result.hasBagInfo = true;
      return this;
    }
    public Builder ClearBagInfo() {
      PrepareBuilder();
      result.hasBagInfo = false;
      result.bagInfo_ = null;
      return this;
    }
  }
  static DBRoleInfo() {
    object.ReferenceEquals(global::DBmsg.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
